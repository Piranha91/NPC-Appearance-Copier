using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using NPCAppearanceCopier.Settings;
using System.IO;

namespace NPCAppearanceCopier
{
    public class Program
    {
        static Lazy<NACsettings> Settings = null!;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "NPCApperanceCopier.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            NACsettings settings = Settings.Value;

            HashSet<ModKey> PluginsToMerge = new HashSet<ModKey>();
            HashSet<ModKey> PluginsExcludedFromMerge = new HashSet<ModKey>();
            if (ModKey.TryFromNameAndExtension("Skyrim.esm", out var SkyrimKey))
            {
                PluginsExcludedFromMerge.Add(SkyrimKey);
            }
            if (ModKey.TryFromNameAndExtension("Update.esm", out var UpdateKey))
            {
                PluginsExcludedFromMerge.Add(UpdateKey);
            }
            if (ModKey.TryFromNameAndExtension("Dawnguard.esm", out var DawnguardKey))
            {
                PluginsExcludedFromMerge.Add(DawnguardKey);
            }
            if (ModKey.TryFromNameAndExtension("HearthFires.esm", out var HearthFiresKey))
            {
                PluginsExcludedFromMerge.Add(HearthFiresKey);
            }
            if (ModKey.TryFromNameAndExtension("Dragonborn.esm", out var DragonbornKey))
            {
                PluginsExcludedFromMerge.Add(DragonbornKey);
            }

            foreach (var NPCdef in settings.NPCs)
            {
                Console.WriteLine("Copying appearance of {0} to {1}", NPCdef.CopyFrom.FormKey.ToString(), NPCdef.CopyTo.FormKey.ToString());

                NPCdef.CopyFrom.TryResolve<INpcGetter>(state.LinkCache, out var DonorNPCGetter);
                if (DonorNPCGetter == null)
                {
                    Console.WriteLine("Could not find donor NPC {0}. Skipping this transfer.", NPCdef.CopyFrom.FormKey.ToString());
                    continue;
                }

                NPCdef.CopyTo.TryResolve<INpcGetter>(state.LinkCache, out var copyTo);
                if (copyTo == null)
                {
                    Console.WriteLine("Could not find acceptor NPC {0}. Skipping this transfer.", NPCdef.CopyTo.FormKey.ToString());
                    continue;
                }
                var AcceptorNPC = state.PatchMod.Npcs.GetOrAddAsOverride(copyTo);
                
                string donorNifPath = state.DataFolderPath + "\\meshes\\actors\\character\\facegendata\\facegeom\\" + DonorNPCGetter.FormKey.ModKey.ToString() + "\\00" + DonorNPCGetter.FormKey.IDString() + ".nif";
                string acceptorNifPath = state.DataFolderPath + "\\meshes\\actors\\character\\facegendata\\facegeom\\" + AcceptorNPC.FormKey.ModKey.ToString() + "\\00" + AcceptorNPC.FormKey.IDString() + ".nif";

                if (!File.Exists(donorNifPath))
                {
                    Console.WriteLine("The following Facegen .nif does not exist. If it is within a BSA, please extract it. Patching of this NPC will be skipped.\n{0}", donorNifPath);
                    continue;
                }

                string donorDdsPath = state.DataFolderPath + "\\textures\\actors\\character\\facegendata\\facetint\\" + DonorNPCGetter.FormKey.ModKey.ToString() + "\\00" + DonorNPCGetter.FormKey.IDString() + ".dds";
                string acceptorDdsPath = state.DataFolderPath + "\\textures\\actors\\character\\facegendata\\facetint\\" + AcceptorNPC.FormKey.ModKey.ToString() + "\\00" + AcceptorNPC.FormKey.IDString() + ".dds";

                if (!File.Exists(donorDdsPath))
                {
                    Console.WriteLine("The following Facegen .dds does not exist. If it is within a BSA, please extract it. Patching of this NPC will be skipped.\n{0}", donorDdsPath);
                    continue;
                }

                AcceptorNPC.Race.SetTo(DonorNPCGetter.Race.FormKey);

                AcceptorNPC.HeadTexture.SetTo(DonorNPCGetter.HeadTexture.FormKeyNullable);
                AcceptorNPC.HeadParts.Clear(); 
                foreach (var hp in DonorNPCGetter.HeadParts)
                {
                    AcceptorNPC.HeadParts.Add(hp);
                }

                if (AcceptorNPC.FaceMorph != null && DonorNPCGetter.FaceMorph != null)
                {
                    AcceptorNPC.FaceMorph.Clear();
                    AcceptorNPC.FaceMorph.DeepCopyIn(DonorNPCGetter.FaceMorph);
                }

                if (AcceptorNPC.FaceParts != null && DonorNPCGetter.FaceParts != null)
                {
                    AcceptorNPC.FaceParts.Clear();
                    AcceptorNPC.FaceParts.DeepCopyIn(DonorNPCGetter.FaceParts);
                }

                AcceptorNPC.HairColor.SetTo(DonorNPCGetter.HairColor.FormKeyNullable);
                
                AcceptorNPC.TextureLighting = DonorNPCGetter.TextureLighting;

                AcceptorNPC.TintLayers.Clear();
                foreach (var tl in DonorNPCGetter.TintLayers)
                {
                    TintLayer newTintLayer = new TintLayer();
                    newTintLayer.DeepCopyIn(tl);
                    AcceptorNPC.TintLayers.Add(newTintLayer);
                }

                AcceptorNPC.Height = DonorNPCGetter.Height;
                AcceptorNPC.Weight = DonorNPCGetter.Weight;

                if (NPCdef.CopyBody == true)
                {
                    AcceptorNPC.WornArmor.SetTo(DonorNPCGetter.WornArmor);
                }

                if (NPCdef.CopyOutfit == true)
                {
                    AcceptorNPC.DefaultOutfit.SetTo(DonorNPCGetter.DefaultOutfit);
                    AcceptorNPC.SleepingOutfit.SetTo(DonorNPCGetter.SleepingOutfit);
                }

                if (File.Exists(acceptorNifPath) && NPCdef.BackUpFaceGen == true)
                {
                    string AcceptorNifBackupPath = state.ExtraSettingsDataPath + "\\BackupAssets\\" + AcceptorNPC.FormKey.ModKey.ToString() + "\\00" + AcceptorNPC.FormKey.IDString() + ".nif_bak_0";
                    int count = 0;
                    while (File.Exists(AcceptorNifBackupPath) == true)
                    {
                        count++;
                        AcceptorNifBackupPath.Remove(AcceptorNifBackupPath.Length - 1, 1);
                        AcceptorNifBackupPath += count.ToString();
                    }
                    if (Directory.Exists(state.ExtraSettingsDataPath + "\\BackupAssets") == false)
                    {
                        Directory.CreateDirectory(state.ExtraSettingsDataPath + "\\BackupAssets");
                    }

                    if (Directory.Exists(state.ExtraSettingsDataPath + "\\BackupAssets\\" + AcceptorNPC.FormKey.ModKey.ToString()) == false)
                    {
                        Directory.CreateDirectory(state.ExtraSettingsDataPath + "\\BackupAssets\\" + AcceptorNPC.FormKey.ModKey.ToString());
                    }

                    File.Move(acceptorNifPath, AcceptorNifBackupPath);
                }

                if (File.Exists(acceptorDdsPath))
                {
                    string AcceptorDdsBackupPath = state.ExtraSettingsDataPath + "\\BackupAssets\\" + AcceptorNPC.FormKey.ModKey.ToString() + "\\00" + AcceptorNPC.FormKey.IDString() + ".dds_bak_0";
                    int count = 0;
                    while (File.Exists(AcceptorDdsBackupPath) == true)
                    {
                        count++;
                        AcceptorDdsBackupPath.Remove(AcceptorDdsBackupPath.Length - 1, 1);
                        AcceptorDdsBackupPath += count.ToString();
                    }
                    if (Directory.Exists(state.ExtraSettingsDataPath + "\\BackupAssets") == false)
                    {
                        Directory.CreateDirectory(state.ExtraSettingsDataPath + "\\BackupAssets");
                    }
                    if (Directory.Exists(state.ExtraSettingsDataPath + "\\BackupAssets\\" + AcceptorNPC.FormKey.ModKey.ToString()) == false)
                    {
                        Directory.CreateDirectory(state.ExtraSettingsDataPath + "\\BackupAssets\\" + AcceptorNPC.FormKey.ModKey.ToString());
                    }
                    File.Move(acceptorDdsPath, AcceptorDdsBackupPath);
                }

                File.Copy(donorNifPath, acceptorNifPath, true);
                File.Copy(donorDdsPath, acceptorDdsPath, true);

                if (NPCdef.CopyResourcesToPlugin == true)
                {
                    foreach (var FL in DonorNPCGetter.ContainedFormLinks)
                    {
                        if (PluginsExcludedFromMerge.Contains(FL.FormKey.ModKey) == false && PluginsToMerge.Contains(FL.FormKey.ModKey) == false)
                        {
                            PluginsToMerge.Add(FL.FormKey.ModKey);
                        }
                    }
                }
            }

            //remap dependencies
            foreach (var mk in PluginsToMerge)
            {
                Console.WriteLine("Remapping Dependencies from {0}.", mk.ToString());
                state.PatchMod.DuplicateFromOnlyReferenced(state.LinkCache, mk, out var _);
            }
        }
    }
}
